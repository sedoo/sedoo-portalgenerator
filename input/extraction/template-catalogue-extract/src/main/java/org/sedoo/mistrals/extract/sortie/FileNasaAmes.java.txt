package extraction.output;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Date;

import extraction.model.DataMesure;
import extraction.model.DataValeur;
import extraction.model.MetadataCapt;
import extraction.model.MetadataJeu;
import extraction.model.MetadataParam;
import extraction.model.Requete;
import extraction.utils.DateTime;
import extraction.utils.StringOperation;

public class FileNasaAmes extends FileOutput {

	private PrintStream out;
	
	public FileNasaAmes(Requete requete, MetadataJeu metadataJeu, String pathExtract) throws IOException {
		super(requete,metadataJeu, pathExtract);
	}
	
	protected void initFluxSortie() throws IOException {
		nameFile = metadataJeu.getJeuNom().replaceAll(" ", "_")+"_"+DateTime.getCurrentYear()+DateTime.getCurrentMonth()+DateTime.getCurrentDay()+".na";
		this.out = new PrintStream(getOutputStream(nameFile), true, "UTF-8");
	}
	
	public void printHeader(ArrayList<DataMesure> mesures) {
		int nbParams = metadataJeu.getParams().size();
		boolean isFixe = metadataJeu.getLatMin().equals(metadataJeu.getLatMax());
		if (!isFixe) nbParams += 2;
		int nbCapts = metadataJeu.getCapts().size();
		String[] jeuDesc = metadataJeu.getJeuDesc().split("\n");
		int nbLignesDesc = jeuDesc.length;
		int nbLignesEntete = 19 + nbParams + nbCapts + nbLignesDesc;
		// Ligne 1 : nb de lignes de l'entête
		println(nbLignesEntete+"  1001");
		// Ligne 2 : PI + contact technique (Nom, prénom et mail)
		String lignePers = metadataJeu.getTechNom()+" "+metadataJeu.getTechPrenom()+" ("+metadataJeu.getTechMail()+")";
		if (metadataJeu.getPiNom() != null) {
			lignePers = metadataJeu.getPiNom()+" "+metadataJeu.getPiPrenom()+" ("+metadataJeu.getPiMail()+")"+", "+lignePers;
		}
		println(StringOperation.sansAccent(lignePers));
		// Ligne 3 : organisme (nom complet, nom court, rue, code postal, ville, pays, mail)
		String ligneOrg = "";
		if (metadataJeu.getOrgDesc() != null)
			ligneOrg += metadataJeu.getOrgDesc()+" ("+metadataJeu.getOrgNom()+")";
		else
			ligneOrg += metadataJeu.getOrgNom();
		ligneOrg += ", "+metadataJeu.getOrgRue()+", "+metadataJeu.getOrgZip()+" "+metadataJeu.getOrgVille()+", "+metadataJeu.getOrgPays();
		if (metadataJeu.getOrgMail() != null && !metadataJeu.getOrgMail().equals(""))
			ligneOrg += ", "+metadataJeu.getOrgMail();
		println(StringOperation.sansAccent(ligneOrg));
		// Ligne 4 : jeu et catégorie
		println("Dataset \""+metadataJeu.getJeuNom()+"\" of category \""+metadataJeu.getCatNom()+"\" from MEGAPOLI database");
		// Ligne 5 : titre du projet
		println("Megapoli");
		// Ligne 6 : 1 seul fichier
		println("1 1");
		// Ligne 7 : dates début et fin de l'acquisition
		String dateD = metadataJeu.getDateDeb();
		String dateF = metadataJeu.getDateFin();
		println(dateD.substring(6)+" "+dateD.substring(3,5)+" "+dateD.substring(0,2)+"  "+dateF.substring(6)+" "+dateF.substring(3,5)+" "+dateF.substring(0,2));
		// Ligne 8 : 0 = pas de constance dans les intervalles de tps
		println("0");
		// Ligne 9 : nom et unité de la variable temporelle
		println("Time (seconds since "+DateTime.changeFormat(mesures.get(0).getDate(),DateTime.formatDateHeureStandard,DateTime.formatDateHeureUS)+")");//"Date (DD/MM/YYYY HH:MM:SS)");
		// Ligne 10 : nb de variables primaires
		println(String.valueOf(nbParams));
		// Ligne 11 : coefficients par lesquel on doit multiplier les variables primaires
		String ligneCoef = "";
		for (int num = 0; num < nbParams; num++) {
			if (num != 0)
				ligneCoef += " ";
			ligneCoef += "1";
		}
		println(ligneCoef);
		// Ligne 12 : valeurs absentes
		String ligneValAbs = "";
		for (int num = 0; num < nbParams; num++) {
			if (num != 0)
				ligneValAbs += " ";
			ligneValAbs += metadataJeu.getValAbs();
		}
		println(ligneValAbs);
		// Lignes (12+1) à (12+nbParams) : noms des paramètres des variables primaires avec leur unité, leur LOD (Limit Of Detection) et leur delta
		if (!isFixe) {
			println("Latitude : unit=degree");
			println("Longitude : unit=degree");
		}
		DataValeur valeur;
		String lod, delta;
		for (MetadataParam metaParam : metadataJeu.getParams()) {
			valeur = findValFromParam(mesures, metaParam.getCodeParam());
			lod = (valeur==null?"none":valeur.getLod());
			delta = (valeur==null?"none":valeur.getDelta());
			println(StringOperation.sansAccent(metaParam.getNomParam())+" ("+metaParam.getCodeParam()+") : lod="+lod+", delta="+delta+", unit="+StringOperation.sansAccent(metaParam.getUnite()));
		}
		// Ligne (13+nbParams) : nb de lignes des commentaires spéciaux
		println("0");
		// Ligne (14+nbParams) : nb de lignes de commentaires
		int nbLignesComment = 5 + nbCapts + nbLignesDesc;
		println(String.valueOf(nbLignesComment));
		// Ligne (15+nbParams) : nom de la plate-forme
		println("Platform : "+metadataJeu.getPlatNom());
		// Ligne (16+nbParams) : capteurs
		String ligneCapts = "Sensor";
		if (nbCapts != 1)
			ligneCapts += "s";
		println(ligneCapts+" :");
		// Lignes (16+nbParams+1) à (16+nbParams+nbCapts) : infos sur les capteurs (type, modèle, fabriquant et paramètres associés)
		String ligneCapt;
		for (MetadataCapt metaCapt : metadataJeu.getCapts()) {
			ligneCapt = metaCapt.getType();
			if (!metaCapt.getModele().equals("UNKNOWN"))
				ligneCapt += ", "+metaCapt.getModele();
			if (!metaCapt.getFabriquant().equals("UNKNOWN"))
				ligneCapt += ", "+metaCapt.getFabriquant();
			ligneCapt += " (parameters: ";
			for (int num = 0; num < metaCapt.getParams().size(); num++) {
				if (num != 0)
					ligneCapt += ", ";
				ligneCapt += metaCapt.getParams().get(num).getCodeParam();
			}
			ligneCapt += ")";
			println(ligneCapt);
		}
		// Ligne (17+nbParams+nbCapts) : description du jeu
		println("Dataset description :");
		// Lignes (17+nbParams+nbCapts+1) à (17+nbParams+nbCapts+nbLignesDesc) : infos sur la description du jeu
		for (String desc : jeuDesc)
			println(StringOperation.sansAccent(desc));
		// Ligne (18+nbParams+nbCapts+nbLignesDesc) : latitudes/longitudes
		String ligneLoc = "Dataset localisation : Latitude = "+metadataJeu.getLatMin();
		if (!metadataJeu.getLatMin().equals(metadataJeu.getLatMax()))
			ligneLoc += " to "+metadataJeu.getLatMax();
		ligneLoc += " degrees";
		ligneLoc += ", Longitude = "+metadataJeu.getLonMin();
		if (!metadataJeu.getLonMin().equals(metadataJeu.getLonMax()))
			ligneLoc += " to "+metadataJeu.getLonMax();
		ligneLoc += " degrees";
		println(ligneLoc);
		// Ligne (19+nbParams+nbCapts+nbLignesDesc) : liste des paramètres sur une ligne
		String ligneListeParams = "Time";
		if (!isFixe)
			ligneListeParams += "\tLatitude\tLongitude";
		for (MetadataParam metaParam : metadataJeu.getParams())
			ligneListeParams += "\t"+metaParam.getCodeParam();
		println(ligneListeParams);
	}

	public void printData(ArrayList<DataMesure> mesures) {
		String ligneData, val;
		boolean isFixe = metadataJeu.getLatMin().equals(metadataJeu.getLatMax());
		Date dateDeb = DateTime.stringToDate(mesures.get(0).getDate(),DateTime.formatDateHeureStandard);
		for (DataMesure mesure : mesures) {
			ligneData = String.valueOf(DateTime.dateToSecondsSince(DateTime.stringToDate(mesure.getDate(), DateTime.formatDateHeureStandard), dateDeb));
			if (!isFixe)
				ligneData += "\t"+mesure.getLat()+"\t"+mesure.getLon();
			for (MetadataParam mp : metadataJeu.getParams()) {
				val = metadataJeu.getValAbs();
				for (DataValeur valeur : mesure.getValeurs()) {
					if (valeur.getCodeParam().equals(mp.getCodeParam())) {
						val = valeur.getVal();
						break;
					}
				}
				ligneData += "\t"+val;
			}
			println(ligneData);
		}
//		println(null);
	}
	
	public void close(){
		out.close();
	}

	/**
	 * Crée un flux de données sur les fichier résultat
	 */
	private OutputStream getOutputStream(String resultFileName) throws IOException {
		// Création de répertoire de sortie
		createDirectory();
		String cheminFile = pathFile+"/"+resultFileName;
		File resultFile = new File(cheminFile);
		FileOutputStream output = new FileOutputStream(resultFile);
		return output;
	}
	
	/**
	 * Ecrit dans le fichier une chaine de caractères et revient à la ligne.
	 * @param ligne
	 */
	private void println(String ligne){
		if (ligne == null) out.println();
		else out.println(ligne);
	}
}
