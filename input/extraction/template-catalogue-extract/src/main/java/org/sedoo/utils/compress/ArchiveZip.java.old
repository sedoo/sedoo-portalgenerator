package org.sedoo.utils.compress;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.zip.GZIPInputStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;

import org.apache.log4j.Logger;

/**
 * Classe pour la manipulation d'une archive zip.
 * @author brissebr
 */
public class ArchiveZip implements Archive {

	private final static Logger logger = Logger.getLogger(ArchiveZip.class);
	
	private File file;
	private ZipOutputStream out;
	private ZipInputStream in;
	private byte[] data = new byte[ BUFFER_SIZE ];
	
	private int cptEntry = 0;
	
	/**
	 * Constructeur.
	 * @param filename nom de l'archive
	 */
	public ArchiveZip(String filename){
		this(new File(filename));
	}
	/**
	 * Constructeur.
	 * @param file archive
	 */
	public ArchiveZip(File file){
		this.file = file;
	}
	
	/**
	 * @see Archive#openWrite()
	 */
	public void openWrite() throws IOException{
		close();
		this.out = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(file)));
		cptEntry = 0;
	}
	/**
	 * 
	 */
	private void openRead() throws IOException{
		close();
		this.in = new ZipInputStream(new BufferedInputStream(new FileInputStream(file)));
	}
	/**
	 * @see Archive#close()
	 */
	public void close() throws IOException{
		if (out != null && cptEntry > 0){
			this.out.close();
		}
		if (in != null){
			this.in.close();
		}
		this.out = null;
		this.in = null;
	}
	/**
	 * @see Archive#addEntry(File)
	 */
	public boolean addEntry(File entry) throws IOException{
		return addEntry(entry,true,false);
	}
		
	/**
	 * @see Archive#addEntry(File,File)
	 */
	public boolean addEntry(File entry, File rootPath) throws IOException{
		return addEntry(entry,rootPath,false);
	}
	/**
	 * @see Archive#addEntry(File, boolean)
	 */
	public boolean addEntry(File entry, boolean storePath) throws IOException{
		return addEntry(entry,storePath,false);
	}
	
	public boolean addEntry(File entry, boolean storePath, boolean delete) throws IOException {
		return addEntry(entry,storePath,null,delete);		
	}
	
	public boolean addEntry(File entry, File rootPath, boolean delete) throws IOException {
		return addEntry(entry,true,rootPath,delete);		
	}
	
	/**
	 * @see Archive#addEntry(File, boolean, boolean)
	 */
	public boolean addEntry(File entry, boolean storePath, File rootPath, boolean delete) throws IOException {
		
		if (out == null){
			throw new IOException("Zip archive is not opened for writing");
		}
		try{
			BufferedInputStream origin = null;
								
			String entryName = null;
			if (storePath){
				if (rootPath == null){
					entryName = entry.getPath();
				}else{
					entryName = entry.getAbsolutePath().replaceFirst(rootPath.getAbsolutePath(), "");
				}
			}else
				entryName = entry.getName();
			
			if (entry.getName().endsWith(".gz")){
				try{
					origin = new BufferedInputStream(new GZIPInputStream(new FileInputStream(entry), BUFFER_SIZE));
					entryName = entryName.substring(0,entryName.length()-3);
				}catch(IOException e){
					logger.warn(e);
					logger.warn("MIME Type: " + ArchiveUtils.getMIMEType(entry));
					origin = new BufferedInputStream( new FileInputStream(entry), BUFFER_SIZE);
				}
			}else
				origin = new BufferedInputStream( new FileInputStream(entry), BUFFER_SIZE);
			
						
			ZipEntry zipEntry = new ZipEntry(entryName);
						
			out.putNextEntry(zipEntry);
			int count;
			while( ( count = origin.read(data, 0, BUFFER_SIZE ) ) != -1 ){
				out.write(data, 0, count);
			}
			origin.close();		
			
			//Suppression du fichier
			if (delete){
				if(entry.delete()){
					logger.debug("File successfully deleted");
				}else{
					logger.warn("File not deleted");
				}
			}
		}catch(IOException e){
			logger.warn("Error while adding file to archive. Cause: "+e);
			return false;
		}
		cptEntry++;
		return true;
	}
	
	/**
	 * @see Archive#extract(String)
	 */
	public void extract(String directory) throws IOException{
		logger.debug("extract()");
		openRead();		
		int count;
		ZipEntry entry;
		while( ( entry = in.getNextEntry() ) != null ){
			logger.debug("Entry: "+entry.getName());
			if( !entry.isDirectory() ){
				if (!directory.endsWith(File.separator)){
					directory += File.separator;
				}
				File destFile = new File(directory + entry.getName());
				if (destFile.getParentFile() != null){
					destFile.getParentFile().mkdirs();
				}
				BufferedOutputStream dest = new BufferedOutputStream(new FileOutputStream(destFile), BUFFER_SIZE );
				while( (count = in.read( data, 0, BUFFER_SIZE ) ) != -1 ) {
					dest.write( data, 0, count );
				}
				dest.close();
			}
		}

	}
		
}
